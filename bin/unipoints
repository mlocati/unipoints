#!/usr/bin/env php
<?php

declare(strict_types=1);

use MLUnipoints\Block;
use MLUnipoints\Build\BlocksBuilder;
use MLUnipoints\Build\CodepointsBuilder;
use MLUnipoints\Build\DataStorage;
use MLUnipoints\Build\Filesystem;
use MLUnipoints\Build\UserMessageException;
use MLUnipoints\Codepoint;
use MLUnipoints\Info\BlockInfo;
use MLUnipoints\Info\CodepointInfo;
use MLUnipoints\Info\PlaneInfo;
use MLUnipoints\Info\UnicodeInfo;
use MLUnipoints\Plane;

const DEFAULT_VERSION = '15.1.0';

set_error_handler(
    static function ($errno, $errstr, $file = '', $line = null) {
        $lines = [];
        $errstr = trim((string) $errstr);
        if ($errstr !== '') {
            $lines[] = $errstr;
        }
        $lines[] = "Error code: {$errno}";
        if ($file) {
            $lines[] = "File: {$file}";
            if ($line) {
                $lines[] = "Line: {$line}";
            }
        }
        throw new RuntimeException(implode("\n", $lines));
    },
    -1
);

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../../vendor/autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require_once $file;
        break;
    }
}

function deleteCodepointDirectory(): void
{
    $path = realpath(__DIR__ . '/../src/Codepoint');
    if ($path === false || !is_dir($path)) {
        return;
    }
    $filesystem = new Filesystem();
    $filesystem->delete($path);
}

function showSyntax(string $name): void
{
    $defaultVersion = DEFAULT_VERSION;
    echo <<<EOT
Syntax {$name} <-h|--help|installed|latest|check-newer|build [version]|docs [--pretty]>

Where:
- installed: print the Unicode version used to build the data in this project
- latest: print the latest version of Unicode
- check-newer: check if the latest Unicode version is greater than the installed one
- build [version]: (re) build the data in this project.
  If [version] is not specified, we'll install version {$defaultVersion}
- docs: generate the data for the docs
  Use the --pretty option to build pretty/unminified data
EOT
    ;
}

function getInstalledUnicodeVersion(): string
{
    if (!enum_exists(Block::class)) {
        throw new UserMessageException(sprintf("The %s enum has not been created yet.\n", Block::class));
    }
    $versionFromBlocks = UnicodeInfo::from(Block::class)->unicodeVersion;
    if (!enum_exists(Codepoint::class)) {
        throw new UserMessageException(sprintf("The %s enum has not been created yet.\n", Codepoint::class));
    }
    $versionFromCodepoints = UnicodeInfo::from(Codepoint::class)->unicodeVersion;
    if ($versionFromBlocks !== $versionFromCodepoints) {
        throw new UserMessageException(sprintf("The version extracted from %s (%s) is different from the one extracted from %s (%s).\n", Block::class, $versionFromBlocks, Codepoint::class, $versionFromCodepoints));
    }
    return $versionFromBlocks;
}

function showInstalledUnicodeVersion(): int
{
    echo getInstalledUnicodeVersion(), "\n";
    return 0;
}

function getLatestUnicodeVersion(): string
{
    $dataStorage = DataStorage::getInstance();
    return $dataStorage->getLatestVersion();
}

function showLatestUnicodeVersion(): int
{
    echo getLatestUnicodeVersion(), "\n";
    return 0;
}

function checkNewerUnicodeVersion(): int
{
    $installed = getInstalledUnicodeVersion();
    $latest = getLatestUnicodeVersion();
    if (version_compare($installed, $latest) >= 0) {
        echo "The latest Unicode version ({$latest}) is not newer than the installed one ({$installed}).\n";
        return 1;
    }
    echo "The latest Unicode version ({$latest}) is newer than the installed one ({$installed}).\n";
    return 0;
}

function build(string $unicodeVersion): int
{
    echo "Building data from Unicode v{$unicodeVersion}\n";
    echo '- deleting src/Unipoints directory... ';
    deleteCodepointDirectory();
    echo "done.\n";
    echo '- building blocks... ';
    $blocksBuilder = new BlocksBuilder(unicodeVersion: $unicodeVersion);
    $blocksBuilder->saveBlocks();
    echo "done.\n";
    echo '- building codepoints... ';
    $codepointsBuilder = new CodepointsBuilder(unicodeVersion: $unicodeVersion, blocksBuilder: $blocksBuilder);
    $codepointsBuilder->saveAllCodepoints();
    echo "done.\n";

    return generateDocs(false);
}

function generateDocs(bool $pretty): int
{
    echo $pretty ? "Generating pretty data for the docs\n" : "Generating data for the docs\n";
    echo '- collecting data... ';
    $planes = [];
    foreach (Plane::cases() as $plane) {
        $planes[] = generatePlaneDocs($plane);
    }
    $data = [
        'unicodeVersion' => getInstalledUnicodeVersion(),
        'planes' => $planes,
    ];
    $json = json_encode($data, JSON_THROW_ON_ERROR | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_LINE_TERMINATORS | ($pretty ? JSON_PRETTY_PRINT : 0));
    echo "done.\n";
    foreach ([
        'docs/assets/data.json',
        'docs-src/public/assets/data.json',
    ] as $relFile) {
        echo "- saving {$relFile}... ";
        $file = __DIR__ . '/../' . $relFile;
        $dir = dirname($file);
        if (!is_dir($dir)) {
            if (!mkdir($dir, 0777, true)) {
                throw new RuntimeException('Failed to create output directory');
            }
        }
        if (file_put_contents($file, $json) !== strlen($json)) {
            throw new RuntimeException('Failed to create data.json');
        }
        echo "done.\n";
    }
    return 0;
}

function generatePlaneDocs(Plane $plane): array
{
    $planeInfo = PlaneInfo::from($plane);
    $blocks = [];
    foreach (Block::cases() as $block) {
        $blockInfo = BlockInfo::from($block);
        if ($blockInfo->plane === $plane) {
            $blocks[] = generateBlockDocs($block);
        }
    }

    return [
        'id' => $plane->value,
        'unassigned' => $planeInfo->unassigned,
        'name' => $planeInfo->name,
        'shortName' => $planeInfo->shortName,
        'fromCodepoint' => $planeInfo->fromCodepoint,
        'toCodepoint' => $planeInfo->toCodepoint,
        'blocks' => $blocks,
    ];
}

function generateBlockDocs(Block $block): array
{
    $blockInfo = BlockInfo::from($block);
    $codepoints = [];
    $codepointsClassName = 'MLUnipoints\\Codepoint\\' . $blockInfo->codename;
    if (stripos($codepointsClassName, 'surrogate') === false || enum_exists($codepointsClassName)) {
        $codepointsClass = new ReflectionEnum($codepointsClassName);
        foreach ($codepointsClass->getCases() as $codepoint) {
            $codepoints[] = generateCodepointDocs($codepoint->getValue());
        }
    }

    return [
        'name' => $blockInfo->name,
        'codename' => $blockInfo->codename,
        'fromCodepoint' => $blockInfo->fromCodepoint,
        'toCodepoint' => $blockInfo->toCodepoint,
        'codepoints' => $codepoints,
    ];
}

function generateCodepointDocs(BackedEnum $codepoint): array
{
    $info = CodepointInfo::from($codepoint);
    $result = [
        'id' => $info->id,
        'name' => $info->name,
        'codename' => $codepoint->name,
        'char' => $codepoint->value,
    ];
    foreach ([
        'unicode1Name',
    ] as $prop) {
        if ($info->{$prop} !== '') {
            $result[$prop] = $info->{$prop};
        }
    }
    foreach ([
        'formalAliases',
        'informativeAliases',
        'correctedNames',
        'controlNames',
        'alternateNames',
        'figments',
        'abbreviations',
    ] as $prop) {
        if ($info->{$prop} !== []) {
            $result[$prop] = $info->{$prop};
        }
    }

    return $result;
}

function main(array $args): int
{
    if (array_intersect(['-h', '--help'], $args) !== []) {
        showSyntax($args[0]);
        return 0;
    }
    $numArgs = count($args);
    switch ($args[1] ?? '') {
        case 'installed':
            if ($numArgs !== 2) {
                showSyntax($args[0]);
                return 1;
            }
            return showInstalledUnicodeVersion();
        case 'latest':
            if ($numArgs !== 2) {
                showSyntax($args[0]);
                return 1;
            }
            return showLatestUnicodeVersion();
        case 'check-newer':
            if ($numArgs !== 2) {
                showSyntax($args[0]);
                return 1;
            }
            return checkNewerUnicodeVersion();
        case 'build':
            switch ($numArgs) {
                case 2:
                    return build(DEFAULT_VERSION);
                case 3:
                    return build($args[2]);
            }
            showSyntax($args[0]);
            return 1;
        case 'docs':
            switch ($numArgs) {
                case 2:
                    return generateDocs(false);
                case 3:
                    if ($args[2] !== '--pretty') {
                        showSyntax($args[0]);
                        return 1;
                    }
                    return generateDocs(true);
            }
            showSyntax($args[0]);
            return 1;
    }
    showSyntax($args[0]);
    return 1;
}

try {
    mb_regex_encoding('UTF-8');
    ini_set('mbstring.script_encoding', 'pass');
    mb_internal_encoding('UTF-8');
    mb_substitute_character('none');
    $exitStatus = main($argv);
} catch (UserMessageException $x) {
    echo trim($x->getMessage()), "\n";
    $exitStatus = 1;
}

exit($exitStatus);
